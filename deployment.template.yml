parameters:
  variableGroup:
  location:
  azure_resource_group_name:
  environment:
  dependOn:

stages:
  - stage: 'Deploy${{ parameters.environment }}'
    displayName: 'Deploy to ${{ parameters.environment }}'
    dependsOn: ${{ parameters.dependOn }}
    variables:
      - group: ${{ parameters.variableGroup }}
    pool:
      vmImage: "ubuntu-latest"
    jobs:
    - deployment: "DeployToAzRG"
      displayName: 'Deploy to RG ${{ parameters.azure_resource_group_name }}'
      environment:
        name: ${{ parameters.environment }}
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                displayName: "Download Repo"
              - task: PowerShell@2
                displayName: "Connect to Azure"
                inputs:
                  filePath: "connect-azure.ps1"
                  arguments: '-ServicePrincipalPassword (ConvertTo-SecureString -AsPlainText -Force  "$(ServerAutomationDemo-AppPw)") -Subscription "$(subscriptionid)" -ApplicationId "$(applicationid)" -Tenant "$(tenantid)" '
              - task: Pester@0
                displayName: "Test Template validity against Azure"
                inputs:
                  scriptFolder: "@{Path='$(System.DefaultWorkingDirectory)/server.template.tests.ps1'; Parameters=@{ResourceGroupName='${{ parameters.azure_resource_group_name }}'}}"
                  resultsFile: "$(System.DefaultWorkingDirectory)/server.template.tests.XML"
                  usePSCore: true
                  run32Bit: False
              - task: PublishTestResults@2
                displayName: "Publish result of validity check"
                inputs:
                  testResultsFormat: "NUnit"
                  testResultsFiles: "$(System.DefaultWorkingDirectory)/server.template.tests.XML"
                  failTaskOnFailedTests: true
              - task: PowerShell@2
                displayName: "Create Resource Group"
                inputs:
                  targetType: "inline"
                  script: 'New-AzResourceGroup -Name "${{ parameters.azure_resource_group_name }}" -Location "${{ parameters.location }}" -Force'
              - task: AzureResourceManagerTemplateDeployment@3
                inputs:
                  deploymentScope: "Resource Group"
                  azureResourceManagerConnection: "ARM"
                  subscriptionId: "$(subscriptionid)"
                  action: "Create Or Update Resource Group"
                  resourceGroupName: ${{ parameters.azure_resource_group_name }}
                  location: ${{ parameters.location }}
                  templateLocation: "Linked artifact"
                  csmFile: "server.json"
                  csmParametersFile: "server.parameters.json"
                  deploymentMode: "Incremental"
                  deploymentOutputs: "arm_output"
              - task: PowerShell@2
                displayName: "Post Installation steps"
                inputs:
                  targetType: filePath
                  filePath: "config-vm.ps1"
                  arguments: '-rgname "${{ parameters.azure_resource_group_name }}"'
              - task: Pester@0
                displayName: "Final Deployment results"
                continueOnError: true
                inputs:
                  scriptFolder: "@{Path='$(System.DefaultWorkingDirectory)/server.infrastructure.tests.ps1'; Parameters=@{RGName='${{ parameters.azure_resource_group_name }}'; Subscription='$(subscriptionid)'}}"
                  resultsFile: "$(Build.ArtifactStagingDirectory)/results/server.infrastructure.tests.XML"
                  usePSCore: true
                  run32Bit: False
              - task: PublishTestResults@2
                displayName: "Publish final deployment results"
                condition: always()
                inputs:
                  testResultsFormat: "NUnit"
                  testResultsFiles: "$(Build.ArtifactStagingDirectory)/results/server.infrastructure.tests.XML"
                  failTaskOnFailedTests: true
              - task: PublishPipelineArtifact@1
                inputs:
                  targetPath: '$(Build.ArtifactStagingDirectory)/results'
                  artifact: '${{ parameters.environment }} Results'